#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright 2019 Red Hat
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

#############################################
#                WARNING                    #
#############################################
#
# This file is auto generated by the resource
#   module builder playbook.
#
# Do not edit this file manually.
#
# Changes to this file will be over written
#   by the resource module builder.
#
# Changes should be made in the model used to
#   generate this file or in the resource module
#   builder template.
#
#############################################

"""
The module file for dmos_l2_interface
"""

from __future__ import absolute_import, division, print_function
__metaclass__ = type

ANSIBLE_METADATA = {
    'metadata_version': '1.1',
    'status': ['preview'],
    'supported_by': 'LDS Labs'
}

DOCUMENTATION = """
---
module: dmos_l2_interface
version_added: 2.9
short_description: 'Manages Layer-2 interface on DATACOM DmOS devices.'
description:
  - This module provides a declarative management of Layer-2 interfaces
    on DATACOM DmOS devices
author: LDS Labs
notes:
  - Tested against DmOS version 5.2.0
  - This module works with connection C(network_cli).
options:
  config:
    description: A dictionary of Layer-2 interface options 
    type: list
    elements: dict
    suboptions:
      interface_name:
        description: L2 Interface name
        type: str
        required: true
      native_vlan_id:
        description: Layer 2 Interface Native VLAN
        type: int
      qinq:
        description: IEEE 802.1Q (QinQ)
        type: bool
      storm_control:
        description: Storm Control configuration
        type: list
        elements: dict
        suboptions:
          traffic:
            description: Storm Control configuration traffic
            type: str
            required: true
            choices:
              - broadcast
              - multicast
              - unicast
          percent:
            description: <0.01..100> Percentage of interface nominal speed in steps of 0.01
            type: float
            default: 1
      tpid:
        description: Tag protocol identifier (TPID) used to identify received frames as VLAN-tagged
        type: str
        choices:
          - '0x88a8'
          - '0x8100'
          - '0x9100'
  state:
    description:
    - The state the configuration should be left in
    type: str
    choices:
    - merged
    - replaced
    - overridden
    - deleted
    default: merged
"""
EXAMPLES = """
### Using Merged ###

dmos_l2_interface:
  config:
    - interface_name: gigabit-ethernet-1/1/1
      native_vlan_id: 12
      qinq: false
      storm_control:
        - traffic: broadcast
          percent: 1.0
        - traffic: multicast
          percent: 1.0
        - traffic: unicast
          percent: 1.0
      tpid: '0x9100'
    - interface_name: gigabit-ethernet-1/1/6
      native_vlan_id: 10
      qinq: true
      storm_control:
        - traffic: broadcast
          percent: 10.1
        - traffic: multicast
          percent: 59.5
        - traffic: unicast
          percent: 0.1
      tpid: '0x88a8'
  state: merged

# This configuration will result in the following commands:

# - switchport interface gigabit-ethernet-1/1/1 native-vlan vlan-id 12
# - no switchport interface gigabit-ethernet-1/1/1 qinq
# - switchport interface gigabit-ethernet-1/1/1 storm-control broadcast 1.0
# - switchport interface gigabit-ethernet-1/1/1 storm-control multicast 1.0
# - switchport interface gigabit-ethernet-1/1/1 storm-control unicast 1.0
# - switchport interface gigabit-ethernet-1/1/1 tpid 0x9100
# - switchport interface gigabit-ethernet-1/1/6 native-vlan vlan-id 10
# - switchport interface gigabit-ethernet-1/1/6 qinq
# - switchport interface gigabit-ethernet-1/1/6 storm-control broadcast 10.1
# - switchport interface gigabit-ethernet-1/1/6 storm-control multicast 59.5
# - switchport interface gigabit-ethernet-1/1/6 storm-control unicast 0.1
# - switchport interface gigabit-ethernet-1/1/6 tpid 0x88a8

### Using Deleted ###

dmos_l2_interface:
  config:
    - interface_name: gigabit-ethernet-1/1/1
      native_vlan_id: 12
      qinq: false
      storm_control:
        - traffic: broadcast
          percent: 1.0
        - traffic: multicast
          percent: 1.0
        - traffic: unicast
          percent: 1.0
      tpid: '0x9100'
    - interface_name: gigabit-ethernet-1/1/6
  state: deleted

# This configuration will result in the following commands:

# - no switchport interface gigabit-ethernet-1/1/1 native-vlan
# - no switchport interface gigabit-ethernet-1/1/1 qinq
# - no switchport interface gigabit-ethernet-1/1/1 storm-control broadcast
# - no switchport interface gigabit-ethernet-1/1/1 storm-control multicast
# - no switchport interface gigabit-ethernet-1/1/1 storm-control unicast
# - no switchport interface gigabit-ethernet-1/1/1 tpid
# - no switchport interface gigabit-ethernet-1/1/6


"""
RETURN = """
before:
  description: The configuration prior to the model invocation.
  returned: always
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
after:
  description: The resulting configuration model invocation.
  returned: when changed
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
commands:
  description: The set of commands pushed to the remote device.
  returned: always
  type: list
  sample: ['command 1', 'command 2', 'command 3']
  changed:
  description: If configuration resulted in any change
  returned: always
  type: bool
  sample: True or False
msg:
  description: Error message
  returned: on error
  type: string
  sample: 'Aborted: reason'
response:
  description: The response of each executed commands
  returned: always
  type: list
  sample: ['Aborted: reason']
"""


from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.network.dmos.argspec.l2_interface.l2_interface import L2_interfaceArgs
from ansible.module_utils.network.dmos.config.l2_interface.l2_interface import L2_interface


def main():
    """
    Main entry point for module execution

    :returns: the result form module invocation
    """
    module = AnsibleModule(argument_spec=L2_interfaceArgs.argument_spec,
                           supports_check_mode=True)

    result = L2_interface(module).execute_module()
    module.exit_json(**result)


if __name__ == '__main__':
    main()
